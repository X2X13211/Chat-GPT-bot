import asyncio
import logging
import aiohttp
import json
import os
import signal
import sys
from typing import Optional
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import ContentType, Message, message
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from openai import OpenAI
from datetime import datetime, timedelta
import uuid
import re
from collections import defaultdict

class BotRunner:
    def __init__(self):
        self.should_stop = False
        self.pending_payments_task: Optional[asyncio.Task] = None

runner = BotRunner()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_IDS = [#] # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_USERNAME = "#"; #use telegram
BOT_TOKEN = "#"; #token bot
YMONEY_TOKEN = os.getenv("YMONEY_TOKEN", "#");
YMONEY_ACCOUNT = "#";

# –ú–æ–¥–µ–ª–∏
MODELS = {
    "üåç GPT-4.1 Nano": "gpt-4.1-nano",# –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
    "üöÄ GPT-5 Nano": "gpt-5-nano",#–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
    "üåç GPT-4o Mini": "gpt-4o-mini",
    "üîç GPT-4o Mini Search": "gpt-4o-mini-search-preview",
    "üíé Gemini 2.0": "gemini-2.0-flash-lite-001",
    "üåÄ DeepSeek V3": "deepseek-chat",
    "üß† Qwen3-235B": "qwen3-235b-a22b-2507",
    "üíé Gemini 2.0 Flash": "gemini-2.0-flash-001",
    "üöÄ Grok 3": "grok-3",
    "üîä Sonar": "sonar",
    "ü§ñ GPT-3.5 Turbo": "gpt-3.5-turbo",
    "üß™ Grok 3 Mini Beta": "grok-3-mini-beta"
}

#–ì—Ä—É–ø–ø—ã –º–æ–¥–µ–ª–µ–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º
SUBSCRIPTION_GROUPS = {
    "premium_1_675": {
        "models": ["gpt-4o-mini", "gpt-4o-mini-search-preview", "gemini-2.0-flash-lite-001"],
        "price": 675,
        "label": "Premium 1 (GPT-4o, Gemini 2.0)",
        "promo_codes": ["PREMIUM2025", "GPT4O675", "AI675"]
    },
    "ai_group_420": {
        "models": ["deepseek-chat", "qwen3-235b-a22b-2507", "gemini-2.0-flash-001", "grok-3-mini-beta"],  # –î–û–ë–ê–í–õ–ï–ù Qwen3
        "price": 420,
        "label": "AI Group (DeepSeek, Qwen3, Gemini, Grok Mini)",
        "promo_codes": ["AIGROUP420", "DEEP420", "GROK420", "QWEN420"]
    },
    "power_group_870": {
        "models": ["grok-3", "sonar"],
        "price": 870,
        "label": "Power Group (Grok 3, Sonar)",
        "promo_codes": ["POWER870", "GROK870", "SONAR870"]
    },
    "gpt_pro_1199": {
        "models": ["gpt-3.5-turbo", "gpt-4o-mini", "gpt-4o-mini-search-preview"],
        "price": 1199,
        "label": "GPT Pro (GPT-3.5, GPT-4o Mini)",
        "promo_codes": ["GPT1199", "OPENAI1199", "TURBO1199"]
    }
}

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
SUBSCRIPTIONS_FILE = "data/subscriptions.json"
PAYMENTS_FILE = "data/payments.json"
PROMO_CODES_FILE = "data/promo_codes.json"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
user_states = {}
subscriptions = defaultdict(dict)#–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≥—Ä—É–ø–ø–∞–º
payment_requests = {}
active_payments = {}
used_promo_codes = set()  #–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è api –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
clients = {
    "gpt-4.1-nano": OpenAI(api_key=os.getenv("GPT4_API_KEY", "sk-aitunnel-Bm73SZY1JAzXh4e5rzlhcY6cmvqb2UV0"),
                        base_url="https://api.aitunnel.ru/v1/"),
    "gpt-5-nano": OpenAI(api_key=os.getenv("GPT5_API_KEY", "sk-aitunnel-Bm73SZY1JAzXh4e5rzlhcY6cmvqb2UV0"),  # –ù–æ–≤–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
                       base_url="https://api.aitunnel.ru/v1/"),
    "gpt-4o-mini": OpenAI(api_key=os.getenv("GPT4_API_KEY", "sk-aitunnel-Bm73SZY1JAzXh4e5rzlhcY6cmvqb2UV0"),
                        base_url="https://api.aitunnel.ru/v1/"),
    "gpt-4o-mini-search-preview": OpenAI(api_key=os.getenv("GPT4_API_KEY", "sk-aitunnel-Bm73SZY1JAzXh4e5rzlhcY6cmvqb2UV0"),
                       base_url="https://api.aitunnel.ru/v1/"),
    "gemini-2.0-flash-lite-001": OpenAI(api_key=os.getenv("GEMINI_API_KEY", "sk-aitunnel-Bm73SZY1JAzXh4e5rzlhcY6cmvqb2UV0"),
                     base_url="https://api.aitunnel.ru/v1/"),
    "deepseek-chat": OpenAI(api_key=os.getenv("DEEPSEEK_API_KEY", "sk-aitunnel-Bm73SZY1JAzXh4e5rzlhcY6cmvqb2UV0"),
                       base_url="https://api.aitunnel.ru/v1/"),
    "qwen3-235b-a22b-2507": OpenAI(api_key=os.getenv("QWEN_API_KEY", "sk-aitunnel-Bm73SZY1JAzXh4e5rzlhcY6cmvqb2UV0"),  # –ù–æ–≤–∞—è –ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
                             base_url="https://api.aitunnel.ru/v1/"),
    "gemini-2.0-flash-001": OpenAI(api_key=os.getenv("GEMINI_API_KEY", "sk-aitunnel-Bm73SZY1JAzXh4e5rzlhcY6cmvqb2UV0")),
    "grok-3": OpenAI(api_key=os.getenv("GROK_API_KEY", "sk-aitunnel-Bm73SZY1JAzXh4e5rzlhcY6cmvqb2UV0"),
                   base_url="https://api.aitunnel.ru/v1/"),
    "sonar": OpenAI(api_key=os.getenv("SONAR_API_KEY", "sk-aitunnel-Bm73SZY1JAzXh4e5rzlhcY6cmvqb2UV0"),
                    base_url="https://api.aitunnel.ru/v1/"),
    "gpt-3.5-turbo": OpenAI(api_key=os.getenv("GPT35_API_KEY", "sk-aitunnel-Bm73SZY1JAzXh4e5rzlhcY6cmvqb2UV0"),
                            base_url="https://api.aitunnel.ru/v1/"),
    "grok-3-mini-beta": OpenAI(api_key=os.getenv("GROK_API_KEY", "sk-aitunnel-Bm73SZY1JAzXh4e5rzlhcY6cmvqb2UV0"),
                            base_url="https://api.aitunnel.ru/v1/")
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def load_data():
    try:
        if os.path.exists(SUBSCRIPTIONS_FILE):
            with open(SUBSCRIPTIONS_FILE, "r") as f:
                data = json.load(f)
                for user_id_str, sub_data in data.items():
                    user_id = int(user_id_str)
                    for sub_type, expires in sub_data.items():
                        subscriptions[user_id][sub_type] = datetime.fromisoformat(expires)

        if os.path.exists(PAYMENTS_FILE):
            with open(PAYMENTS_FILE, "r") as f:
                data = json.load(f)
                for payment_id, payment_info in data.items():
                    payment_info["timestamp"] = datetime.fromisoformat(payment_info["timestamp"])
                    payment_requests[payment_id] = payment_info

        if os.path.exists(PROMO_CODES_FILE):
            with open(PROMO_CODES_FILE, "r") as f:
                global used_promo_codes
                used_promo_codes = set(json.load(f))
    except Exception as e:
        logger.error(f"Error loading data: {str(e)}")

def save_data():
    try:
        subscriptions_to_save = {
            str(user_id): {
                sub_type: expires.isoformat()
                for sub_type, expires in sub_data.items()
            }
            for user_id, sub_data in subscriptions.items()
        }
        with open(SUBSCRIPTIONS_FILE, "w") as f:
            json.dump(subscriptions_to_save, f)

        payments_to_save = {
            payment_id: {
                "user_id": info["user_id"],
                "amount": info["amount"],
                "subscription_type": info["subscription_type"],
                "status": info["status"],
                "timestamp": info["timestamp"].isoformat()
            }
            for payment_id, info in payment_requests.items()
        }
        with open(PAYMENTS_FILE, "w") as f:
            json.dump(payments_to_save, f)

        with open(PROMO_CODES_FILE, "w") as f:
            json.dump(list(used_promo_codes), f)
    except Exception as e:
        logger.error(f"Error saving data: {str(e)}")

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_model_keyboard():
    builder = ReplyKeyboardBuilder()
    for model_name in MODELS.keys():
        builder.add(types.KeyboardButton(text=model_name))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

def get_subscription_keyboard():
    builder = InlineKeyboardBuilder()

    #Premium 1 –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞ 675
    builder.add(types.InlineKeyboardButton(
        text=f"üíé Premium 1 - {SUBSCRIPTION_GROUPS['premium_1_675']['price']} —Ä—É–±/–º–µ—Å",
        callback_data="subscribe_premium_1_675"
    ))

    #AI Group –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞ 420
    builder.add(types.InlineKeyboardButton(
        text=f"ü§ñ AI Group - {SUBSCRIPTION_GROUPS['ai_group_420']['price']} —Ä—É–±/–º–µ—Å",
        callback_data="subscribe_ai_group_420"
    ))

    #Power Group –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞ 870
    builder.add(types.InlineKeyboardButton(
        text=f"üöÄ Power Group - {SUBSCRIPTION_GROUPS['power_group_870']['price']} —Ä—É–±/–º–µ—Å",
        callback_data="subscribe_power_group_870"
    ))

    #GPT Pro –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞ 1199
    builder.add(types.InlineKeyboardButton(
        text=f"üíé GPT Pro - {SUBSCRIPTION_GROUPS['gpt_pro_1199']['price']} —Ä—É–±/–º–µ—Å",
        callback_data="subscribe_gpt_pro_1199"
    ))

    #–ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    builder.add(types.InlineKeyboardButton(
        text="üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥",
        callback_data="enter_promo_code"
    ))

    builder.adjust(1)
    return builder.as_markup()

def get_admin_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        callback_data="admin_stats"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏",
        callback_data="admin_check_payments"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫",
        callback_data="admin_list_subs"
    ))
    builder.add(types.InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
        callback_data="admin_add_sub"
    ))
    builder.add(types.InlineKeyboardButton(
        text="‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞",
        callback_data="admin_broadcast"
    ))
    builder.add(types.InlineKeyboardButton(
        text="üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏",
        callback_data="admin_promo_codes"
    ))
    return builder.as_markup()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def notify_admins(text: str):
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, text, parse_mode=ParseMode.HTML)
        except Exception as e:
            logger.error(f"Failed to send admin notification: {str(e)}")

async def create_payment_link(amount: float, label: str) -> tuple:
    payment_id = str(uuid.uuid4())
    payment_url = f"https://yoomoney.ru/quickpay/confirm.xml?receiver={YMONEY_ACCOUNT}&quickpay-form=small&targets={label}&paymentType=AC&sum={amount}&label={payment_id}"
    return payment_url, payment_id

async def verify_payment(payment_id: str) -> bool:
    if payment_id not in payment_requests:
        logger.error(f"Payment ID {payment_id} not found in requests")
        return False

    payment_info = payment_requests[payment_id]

    if payment_info["status"] == "completed":
        return True

    headers = {
        "Authorization": f"Bearer {YMONEY_TOKEN}",
        "Content-Type": "application/x-www-form-urlencoded"
    }
    params = {
        "label": payment_id,
        "records": "5",
        "type": "deposition"
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                    "https://yoomoney.ru/api/operation-history",
                    headers=headers,
                    params=params,
                    timeout=10
            ) as resp:
                if resp.status != 200:
                    logger.error(f"YooMoney API error: HTTP {resp.status}")
                    return False

                try:
                    data = await resp.json()
                except Exception as e:
                    logger.error(f"Failed to parse YooMoney response: {str(e)}")
                    return False

                #–ü—Ä–æ–≤–µ—Ä—è–µ–º–Ω–∞–ª–∏—á–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                for operation in data.get('operations', []):
                    if (operation.get('status') == 'success' and
                            operation.get('label') == payment_id and
                            float(operation.get('amount', 0)) == payment_info["amount"]):
                        payment_info["status"] = "completed"
                        user_id = payment_info["user_id"]
                        sub_type = payment_info["subscription_type"]
                        expires = datetime.now() + timedelta(days=30)
                        subscriptions[user_id][sub_type] = expires

                        if user_id in active_payments:
                            del active_payments[user_id]

                        save_data()
                        return True

                return False

    except asyncio.TimeoutError:
        logger.warning(f"Timeout while checking payment {payment_id}")
        return False
    except Exception as e:
        logger.error(f"Error verifying payment {payment_id}: {str(e)}")
        return False

async def check_pending_payments():

    while not runner.should_stop:
        try:
            await asyncio.sleep(300)

            now = datetime.now()
            completed_payments = []
            failed_payments = []

            for payment_id, payment_info in list(payment_requests.items()):
                if payment_info["status"] == "pending":
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
                    if (now - payment_info["timestamp"]) > timedelta(hours=24):
                        completed_payments.append(payment_id)
                        continue

                    try:
                        is_paid = await verify_payment(payment_id)
                        if is_paid:
                            completed_payments.append(payment_id)
                            try:
                                sub_type = payment_info["subscription_type"]
                                group_info = SUBSCRIPTION_GROUPS.get(sub_type, {})
                                models_list = "\n".join([f"- {name}" for name, model_id in MODELS.items()
                                                         if model_id in group_info.get("models", [])])

                                await bot.send_message(
                                    payment_info["user_id"],
                                    f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                                    f"–¢–∏–ø: {group_info.get('label', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                                    f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {(datetime.now() + timedelta(days=30)).strftime('%d.%m.%Y %H:%M')}\n\n"
                                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n{models_list}",
                                    parse_mode=ParseMode.HTML
                                )
                            except Exception as e:
                                logger.error(f"Error sending payment confirmation: {str(e)}")
                        else:
                            
                            payment_info.setdefault('retry_count', 0)
                            payment_info['retry_count'] += 1

                            #–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
                            if payment_info['retry_count'] > 5:
                                failed_payments.append(payment_id)
                    except Exception as e:
                        logger.error(f"Error checking payment {payment_id}: {str(e)}")
                        continue

            # delte –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
            for payment_id in completed_payments + failed_payments:
                if payment_id in payment_requests:
                    user_id = payment_requests[payment_id]["user_id"]
                    if user_id in active_payments and active_payments[user_id] == payment_id:
                        del active_payments[user_id]
                    del payment_requests[payment_id]

            if completed_payments or failed_payments:
                save_data()

        except Exception as e:
            logger.error(f"Error in check_pending_payments: {str(e)}")
            await asyncio.sleep(60)

async def call_api(model: str, prompt: str) -> str:
    try:
        if model in ["gpt-4.1-nano", "gpt-5-nano"]:
            #–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã –∑–∞–ø—Ä–æ—Å–∞
            if len(prompt) > 1000:
                return "‚ö†Ô∏è –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞ - 1000 —Å–∏–º–≤–æ–ª–æ–≤"

        client = clients.get(model)
        if not client:
            return "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å"

        chat_result = client.chat.completions.create(
            messages=[{"role": "user", "content": prompt}],
            model=model,
            max_tokens=2000,
        )
        return chat_result.choices[0].message.content
    except Exception as e:
        logger.error(f"{model} API error: {str(e)}")
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {model} API"

async def activate_promo_code(user_id: int, promo_code: str):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    promo_code = promo_code.upper().strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
    if promo_code in used_promo_codes:
        return False, "‚ö†Ô∏è –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"

    activated = False
    group_name = None

    for group_id, group_info in SUBSCRIPTION_GROUPS.items():
        if promo_code in group_info["promo_codes"]:
            expires = datetime.now() + timedelta(days=30)
            subscriptions[user_id][group_id] = expires
            used_promo_codes.add(promo_code)
            activated = True
            group_name = group_info["label"]
            break

    if activated:
        save_data()
        return True, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {group_name} –Ω–∞ 30 –¥–Ω–µ–π"
    else:
        return False, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥"

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start", "help"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    user_states[user_id] = None

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π AI-–º–æ–¥–µ–ª–µ–π.\n\n"
        "üåç <b>GPT-4.1 Nano</b> - –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å!\n"
        "üöÄ <b>GPT-5 Nano</b> - –Ω–æ–≤–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å!\n\n"
        "–î—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ:\n"
        "üíé Premium 1 (675 —Ä—É–±/–º–µ—Å):\n"
        "- GPT-4o Mini\n"
        "- GPT-4o Mini Search\n"
        "- Gemini 2.0\n\n"
        "ü§ñ AI Group (420 —Ä—É–±/–º–µ—Å):\n"
        "- DeepSeek-chat\n"
        "- Qwen3-235B (–Ω–æ–≤–∞—è!)\n"
        "- Gemini 2.0 Flash\n"
        "- Grok 3 Mini Beta\n\n"
        "üöÄ Power Group (870 —Ä—É–±/–º–µ—Å):\n"
        "- Grok 3\n"
        "- Sonar\n\n"
        "üíé GPT Pro (1199 —Ä—É–±/–º–µ—Å):\n"
        "- GPT-3.5 Turbo\n"
        "- GPT-4o Mini\n"
        "- GPT-4o Mini Search\n\n"
        "üéÅ –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å:",
        reply_markup=get_model_keyboard(),
        parse_mode=ParseMode.HTML
    )

@dp.message(Command("promo"))
async def cmd_promo(message: types.Message):
    #/promo
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo <–∫–æ–¥>")
        return

    promo_code = args[1]
    success, response = await activate_promo_code(message.from_user.id, promo_code)
    await message.answer(response, parse_mode=ParseMode.HTML)

@dp.message(Command("my_subscription"))
async def cmd_my_subscription(message: types.Message):
    user_id = message.from_user.id
    response = []
    active_subs = []
    for sub_type, expires in subscriptions.get(user_id, {}).items():
        if expires > datetime.now():
            group_info = SUBSCRIPTION_GROUPS.get(sub_type, {})
            models_list = "\n".join([f"- {name}" for name, model_id in MODELS.items()
                                     if model_id in group_info.get("models", [])])

            active_subs.append(
                f"üîπ {group_info.get('label', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires.strftime('%d.%m.%Y %H:%M')}\n"
                f"–ú–æ–¥–µ–ª–∏:\n{models_list}"
            )
    if active_subs:
        response.append("üíé <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n" + "\n\n".join(active_subs))
    else:
        response.append("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")

    response.append("\nüåç <b>GPT-4.1 Nano</b> –∏ <b>GPT-5 Nano</b> - –≤—Å–µ–≥–¥–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã!")

    await message.answer(
        "\n\n".join(response),
        parse_mode=ParseMode.HTML,
        reply_markup=get_subscription_keyboard()
    )

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await message.answer(
        "üõ†Ô∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>",
        reply_markup=get_admin_keyboard(),
        parse_mode=ParseMode.HTML
    )

@dp.message(Command("confirm_payment"))
async def cmd_confirm_payment(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /confirm_payment <payment_id>")
        return

    payment_id = args[1]
    if payment_id not in payment_requests:
        await message.answer("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    payment_info = payment_requests[payment_id]
    if payment_info["status"] == "completed":
        await message.answer("‚ÑπÔ∏è –ü–ª–∞—Ç–µ–∂ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
        return

    payment_info["status"] = "completed"
    user_id = payment_info["user_id"]
    sub_type = payment_info["subscription_type"]

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    expires = datetime.now() + timedelta(days=30)
    subscriptions[user_id][sub_type] = expires

    if user_id in active_payments:
        del active_payments[user_id]
    save_data()

    try:
        group_info = SUBSCRIPTION_GROUPS.get(sub_type, {})
        models_list = "\n".join([f"- {name}" for name, model_id in MODELS.items()
                                 if model_id in group_info.get("models", [])])
        await bot.send_message(
            user_id,
            f"‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n\n"
            f"–¢–∏–ø: {group_info.get('label', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n{models_list}",
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"Error sending confirmation to user: {str(e)}")

    await message.answer(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {payment_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
    await notify_admins(
        f"üõ†Ô∏è –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤—Ä—É—á–Ω—É—é\n\n"
        f"ID: {payment_id}\n"
        f"–ê–¥–º–∏–Ω: {message.from_user.id}\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
        f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {sub_type}"
    )

@dp.message(Command("add_subscription"))
async def cmd_add_subscription(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    args = message.text.split()
    if len(args) != 3:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_subscription <user_id> <subscription_type>\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–¥–ø–∏—Å–æ–∫:\n"
            "- premium_1_675\n"
            "- ai_group_420\n"
            "- power_group_870\n"
            "- gpt_pro_1199"
        )
        return

    try:
        user_id = int(args[1])
        sub_type = args[2]

        if sub_type not in SUBSCRIPTION_GROUPS:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ: premium_1_675, ai_group_420, power_group_870, gpt_pro_1199")
            return

        expires = datetime.now() + timedelta(days=30)
        subscriptions[user_id][sub_type] = expires

        group_info = SUBSCRIPTION_GROUPS[sub_type]
        models_list = "\n".join([f"- {name}" for name, model_id in MODELS.items()
                                 if model_id in group_info.get("models", [])])

        try:
            await bot.send_message(
                user_id,
                f"üéâ –í–∞–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞!\n\n"
                f"–¢–∏–ø: {group_info['label']}\n"
                f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n{models_list}",
                parse_mode=ParseMode.HTML
            )
        except Exception as e:
            logger.error(f"Error sending subscription notification: {str(e)}")

        await message.answer(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {group_info['label']} –¥–ª—è {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π\n"
            f"–¶–µ–Ω–∞: {group_info['price']} —Ä—É–±"
        )

        save_data()
        await notify_admins(
            f"üõ†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
            f"–¢–∏–ø: {group_info['label']}\n"
            f"–ê–¥–º–∏–Ω: {message.from_user.id}"
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")

@dp.message(Command("add_promo"))
async def cmd_add_promo(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    args = message.text.split()
    if len(args) != 3:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_promo <subscription_type> <promo_code>\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–¥–ø–∏—Å–æ–∫:\n"
            "- premium_1_675\n"
            "- ai_group_420\n"
            "- power_group_870\n"
            "- gpt_pro_1199"
        )
        return

    sub_type = args[1]
    promo_code = args[2].upper()

    if sub_type not in SUBSCRIPTION_GROUPS:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏")
        return

    # add promo
    SUBSCRIPTION_GROUPS[sub_type]["promo_codes"].append(promo_code)
    save_data()

    await message.answer(
        f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {SUBSCRIPTION_GROUPS[sub_type]['label']}"
    )

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callbackov
@dp.callback_query(F.data == "enter_promo_code")
async def enter_promo_code_handler(callback: types.CallbackQuery):
    await callback.message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>/promo –ö–û–î</code>\n\n"
        "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:",
        parse_mode=ParseMode.HTML,
        reply_markup=get_subscription_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("subscribe_"))
async def handle_subscription(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    sub_type = callback.data.split("_", 1)[1]

    if sub_type not in SUBSCRIPTION_GROUPS:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏")
        return

    group_info = SUBSCRIPTION_GROUPS[sub_type]
    amount = group_info["price"]
    description = group_info["label"]

    payment_url, payment_id = await create_payment_link(amount, description)

    payment_requests[payment_id] = {
        "user_id": user_id,
        "amount": amount,
        "subscription_type": sub_type,
        "label": description,
        "status": "pending",
        "timestamp": datetime.now()
    }
    active_payments[user_id] = payment_id

    models_list = "\n".join([f"- {name}" for name, model_id in MODELS.items()
                             if model_id in group_info.get("models", [])])

    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω",
        url=payment_url
    ))
    builder.row(types.InlineKeyboardButton(
        text="üè¶ –°–ë–ü / –õ–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞",
        url="https://t.me/apt028"
    ))
    builder.row(types.InlineKeyboardButton(
        text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
        callback_data=f"check_payment_{payment_id}"
    ))
    builder.row(types.InlineKeyboardButton(
        text="üéÅ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥",
        callback_data="enter_promo_code"
    ))

    await callback.message.edit_text(
        f"üí≥ –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ <b>{description}</b> –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n\n"
        f"<b>üí≥ –û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞:</b>\n"
        f"1. –û–ø–ª–∞—Ç–∏—Ç–µ {amount} —Ä—É–±. –ø–æ <a href='{payment_url}'>—Å—Å—ã–ª–∫–µ</a>\n"
        "2. –ù–∞–∂–º–∏—Ç–µ '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É' –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã\n\n"
        f"<b>üè¶ –°–ë–ü / –õ–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞:</b>\n"
        "1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üè¶ –°–ë–ü / –õ–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞' –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n"
        "2. –°–æ–æ–±—â–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "‚è≥ –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 60 –º–∏–Ω—É—Ç\n\n"
        f"<b>üéÅ –ü—Ä–æ–º–æ–∫–æ–¥:</b>\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É\n\n"
        f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: 30 –¥–Ω–µ–π\n"
        f"ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n{models_list}\n\n"
        "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –¥–æ 5 –º–∏–Ω—É—Ç",
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("check_payment_"))
async def check_payment_handler(callback: types.CallbackQuery):
    payment_id = callback.data.split("_")[-1]
    user_id = callback.from_user.id

    if payment_id not in payment_requests:
        await callback.answer("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    payment_info = payment_requests[payment_id]

    if payment_info["status"] == "completed":
        await callback.answer("‚úÖ –≠—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω", show_alert=True)
        return

    is_paid = await verify_payment(payment_id)

    if is_paid:
        payment_info["status"] = "completed"
        sub_type = payment_info["subscription_type"]
        group_info = SUBSCRIPTION_GROUPS.get(sub_type, {})

        models_list = "\n".join([f"- {name}" for name, model_id in MODELS.items()
                                 if model_id in group_info.get("models", [])])

        expires = datetime.now() + timedelta(days=30)
        subscriptions[user_id][sub_type] = expires

        await callback.message.edit_text(
            f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {expires.strftime('%d.%m.%Y %H:%M')}.\n\n"
            f"–¢–∏–ø: {group_info.get('label', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n{models_list}",
            parse_mode=ParseMode.HTML
        )
    else:
        await callback.answer(
            "‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            show_alert=True
        )

@dp.callback_query(F.data == "admin_promo_codes")
async def admin_promo_codes_handler(callback: types.CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    promo_list = []
    for group_id, group_info in SUBSCRIPTION_GROUPS.items():
        promo_list.append(
            f"üîπ {group_info['label']}:\n" +
            "\n".join([f"- {code}" for code in group_info["promo_codes"]])
        )

    await callback.message.answer(
        "üéÅ <b>–°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:</b>\n\n" +
        "\n\n".join(promo_list) +
        "\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n" +
        "\n".join([f"- {code}" for code in used_promo_codes]) +
        "\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_promo",
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@dp.message(F.text.in_(list(MODELS.keys())))
async def select_model_handler(message: types.Message):
    user_id = message.from_user.id
    selected_model = MODELS.get(message.text)

    if not selected_model:
        await message.answer("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return

    user_states[user_id] = selected_model
    await message.answer(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: <b>{message.text}</b>\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã.",
        reply_markup=get_model_keyboard(),
        parse_mode=ParseMode.HTML
    )

@dp.message()
async def handle_message(message: types.Message):
    if message.text.startswith('/'):
        return

    user_id = message.from_user.id

    if user_id not in user_states or not user_states[user_id]:
        await message.answer(
            "‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –º–µ–Ω—é.",
            reply_markup=get_model_keyboard()
        )
        return

    model = user_states[user_id]
    await bot.send_chat_action(message.chat.id, "typing")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–æ–¥–µ–ª–∏
        if model not in ["gpt-4.1-nano", "gpt-5-nano"]:  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
            has_access = False
            for sub_type, expires in subscriptions.get(user_id, {}).items():
                if expires > datetime.now():
                    group_models = SUBSCRIPTION_GROUPS.get(sub_type, {}).get("models", [])
                    if model in group_models:
                        has_access = True
                        break

            username = message.from_user.username
            if not (username == ADMIN_USERNAME or has_access):
                await message.answer(
                    f"‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞.",
                    reply_markup=get_subscription_keyboard(),
                    parse_mode=ParseMode.HTML
                )
                return

        response = await call_api(model, message.text)
        prefix = {
            "gpt-4.1-nano": "üåç <b>GPT-4.1 Nano</b>:\n\n",
            "gpt-5-nano": "üöÄ <b>GPT-5 Nano</b>:\n\n",
            "gpt-4o-mini": "üåç <b>GPT-4o Mini</b>:\n\n",
            "gpt-4o-mini-search-preview": "üîç <b>GPT-4o Mini Search</b>:\n\n",
            "gemini-2.0-flash-lite": "üíé <b>Gemini 2.0</b>:\n\n",
            "deepseek-chat": "üåÄ <b>DeepSeek-chat</b>:\n\n",
            "qwen3-235b-a22b-2507": "üß† <b>Qwen3-235B</b>:\n\n",
            "gemini-2.0-flash": "üíé <b>Gemini 2.0 Flash</b>:\n\n",
            "grok-3": "üöÄ <b>Grok 3</b>:\n\n",
            "sonar": "üîä <b>Sonar</b>:\n\n"
        }.get(model, "ü§ñ <b>AI</b>:\n\n")

        max_length = 4000
        for i in range(0, len(response), max_length):
            part = response[i:i + max_length]
            await message.answer(
                prefix + part,
                parse_mode=ParseMode.HTML
            )

    except Exception as e:
        logger.error(f"Error processing message: {str(e)}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
            parse_mode=ParseMode.HTML
        )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    def handle_signal(sig, frame):
        logger.info(f"Received signal {sig}, shutting down...")
        runner.should_stop = True
        if runner.pending_payments_task:
            runner.pending_payments_task.cancel()

    signal.signal(signal.SIGINT, handle_signal)
    signal.signal(signal.SIGTERM, handle_signal)

    load_data()

    try:
        await bot.delete_webhook(drop_pending_updates=True)
        runner.pending_payments_task = asyncio.create_task(check_pending_payments())

        await notify_admins("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        logger.info("Bot started")

        await dp.start_polling(bot, handle_signals=False)

    except asyncio.CancelledError:
        logger.info("Bot stopped by signal")
    except Exception as e:
        logger.error(f"Bot crashed: {str(e)}")
        await notify_admins(f"üö® –ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π:\n{str(e)}")
    finally:
        logger.info("Shutting down...")
        if runner.pending_payments_task:
            runner.pending_payments_task.cancel()
            try:
                await runner.pending_payments_task
            except asyncio.CancelledError:
                pass

        save_data()
        await bot.session.close()
        logger.info("Bot stopped gracefully")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Keyboard interrupt received")
        sys.exit(0)